buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies { 
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath "de.undercouch:gradle-download-task:3.1.2"
    }
}

import de.undercouch.gradle.tasks.download.Download
apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'curseforge'


group = 'tterrag.wailaplugins'
archivesBaseName = "WAILAPlugins"
version = "MC${minecraft_version}-${mod_version}-${System.getenv().BUILD_NUMBER}"

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = 'run'
    
    replace "@VERSION@", project.version
	replace "${toReplace}", "required-after:Forge@[${forge_version},);required-after:endercore@[${endercore_version},);required-after:Waila;"
    replaceIn "WailaPlugins.java"
}

configurations {
    provided
    embedded
    compile.extendsFrom provided, embedded
}


repositories {
    maven { // ttCore
        name 'tterrag Repo'
        url "http://maven.tterrag.com/"
    }
	maven { // WAILA
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
	maven { // CCC/NEI (for WAILA)
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven { // Forestry
        name 'Player Maven'
        url "http://maven.ic2.player.to"
    }
    maven { // RCrops
        name 'TehNut Maven'
        url "http://tehnut.info/maven"
    }
}

dependencies {
    compile "com.enderio.core:EnderCore:${endercore_version}:dev"
	compile "mcp.mobius.waila:Waila:${WAILA_version}"
    compile "net.sengir.forestry:forestry_1.7.10:${forestry_version}:dev"
    //compile "info.tehnut.resourcefulcrops:ResourcefulCrops:${rcrops_version}:deobf"
	provided fileTree(dir: 'lib', include: '*.jar')
}



processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

jar {

}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

import de.undercouch.gradle.tasks.download.Download

task downloadZip(type: Download) {
    src 'http://assets.tterrag.com/WAILAPlugins/libs.zip'
    dest new File(buildDir, 'libs.zip')
    onlyIfNewer true
}

task clearOld(type: Delete) {
    delete 'libs'
}

/*task downloadGregTech(type: Download) {
    dest new File(buildDir, "gregtech-${gregtech_version}-dev.jar")

    onlyIf {
        !dest.exists()
    }
    src "http://jenkins.usrv.eu:8080/job/Gregtech-5-Unofficial/${gregtech_jenkinsbuild}/artifact/build/libs/gregtech-${gregtech_version}-dev.jar"
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}*/

task downloadIC2(type: Download) {
    dest new File(buildDir, "industrialcraft-${ic2_version}-dev.jar")

    onlyIf {
        !dest.exists()
    }
    src "http://jenkins.ic2.player.to/job/IC2_experimental/${ic2_jenkinsbuild}/artifact/build/libs/industrialcraft-${ic2_version}-dev.jar"
    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

task downloadLibs(dependsOn: [downloadZip, downloadIC2], type: Copy) {
    from zipTree(downloadZip.dest)
    into file('libs')

    //from downloadGregTech.dest
    //into file('libs')

    from downloadIC2.dest
    into file('libs')
}

tasks.build.dependsOn sourceJar, deobfJar

tasks.downloadLibs.dependsOn clearOld
tasks.sourceMainJava.dependsOn downloadLibs
tasks.eclipse.dependsOn downloadLibs
tasks.idea.dependsOn downloadLibs

